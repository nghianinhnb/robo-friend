{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/searchSlice.js","components/robotSlice.js","containers/App.js","serviceWorkerRegistration.js","app/store.js","index.js"],"names":["Card","name","email","id","className","alt","src","style","width","height","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflow","border","children","searchSlice","createSlice","initialState","searchField","reducers","updateSearchField","state","action","payload","actions","reducer","thunkFetchRobots","createAsyncThunk","params","thunkAPI","fetch","then","response","json","robotSlice","isPending","error","extraReducers","pending","fulfilled","rejected","App","useSelector","search","robot","dispatch","useDispatch","filteredRobots","filter","toLowerCase","includes","useEffect","e","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","rootReducer","searchReducer","robotReducer","store","configureStore","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.72357655.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} style={{width: 200, height: 200}}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst searchSlice = createSlice({\r\n    name: 'search',\r\n    initialState: {\r\n        searchField: ''\r\n    },\r\n    reducers: {\r\n        updateSearchField: (state, action) => {\r\n            return { ...state, searchField: action.payload }\r\n        }\r\n    }\r\n})\r\n\r\nconst { actions, reducer } = searchSlice;\r\n\r\nexport const { updateSearchField } = actions;\r\nexport default reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const thunkFetchRobots = createAsyncThunk(\r\n    'robot/fetch',\r\n    async (params, thunkAPI) => {\r\n        return fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\r\n    }\r\n)\r\n\r\n\r\nconst robotSlice = createSlice({\r\n    name: 'robot',\r\n    initialState: {\r\n        isPending: false,\r\n        robots: [],\r\n        error: '',\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [thunkFetchRobots.pending]: (state, action) => {\r\n            state.isPending = true\r\n        },\r\n        [thunkFetchRobots.fulfilled]: (state, action) => {\r\n            state.isPending = false;\r\n            state.robots = action.payload;\r\n        },\r\n        [thunkFetchRobots.rejected]: (state, action) => {\r\n            state.isPending = false;\r\n            state.error = 'Fail to  load!';\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst { actions, reducer } = robotSlice;\r\n\r\nexport const {} = actions;\r\nexport default reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux/es/exports';\r\nimport { updateSearchField } from '../components/searchSlice';\r\nimport { thunkFetchRobots } from '../components/robotSlice';\r\n\r\n\r\nfunction App(props) {\r\n  // --- Params ---\r\n  const searchfield = useSelector(state => state.search.searchField)\r\n  const {\r\n    isPending,\r\n    robots,\r\n    error,\r\n  } = useSelector(state => state.robot)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // --- Functions ---\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  })\r\n\r\n  // --- Hooks ---\r\n  useEffect(() => {\r\n    dispatch(thunkFetchRobots())\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        isPending\r\n        ?\r\n          <h1>Loading</h1> \r\n        :\r\n          (\r\n            <div className='tc'>\r\n              <h1 className='f1'>RoboFriends</h1>\r\n              <SearchBox searchChange={e => dispatch(updateSearchField(e.target.value))}/>\r\n              <Scroll>\r\n                {        \r\n                error\r\n                ?\r\n                <h1>{error}</h1> \r\n                :\r\n                  <CardList robots={filteredRobots} />\r\n                }\r\n              </Scroll>\r\n            </div>\r\n          )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import robotReducer from '../components/robotSlice';\r\nimport searchReducer from '../components/searchSlice';\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nconst rootReducer = {\r\n    search: searchReducer,\r\n    robot: robotReducer\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport 'tachyons'; \r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}